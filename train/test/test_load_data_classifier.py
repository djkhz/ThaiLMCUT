import unittest
import os,sys,inspect
from functions import load_data_classifier

class Test_data_loader(unittest.TestCase):


    def test_load_data_cl(self):
        path = "../../data/news_00001.txt"
        expect_list = [
        ['http://www.bangkokhealth.com/healthnews _ htdoc/healthnews _ detail.asp?Number=10506'],
        ['สงสัย', 'ติด', 'หวัด', 'นก', ' ', 'อีก', 'คน', 'ยัง', 'น่า', 'ห่วง'],
        ['ตาม', 'ที่', 'นางประนอม ทองจันทร์', ' ', 'กับ', ' ', 'ด.ช.กิตติพงษ์ แหลมผักแว่น', ' ', 'และ', ' ',
         'ด.ญ.กาญจนา กรองแก้ว', ' ', 'ป่วย', 'สงสัย', 'ติด', 'เชื้อ', 'ไข้', 'ขณะ', 'นี้', 'ยัง', 'ไม่', 'ดี', 'ขึ้น'],
        ['หลัง', 'เข้า', 'เยี่ยม', 'ดู', 'อาการ', 'ผู้', 'ป่วย', 'แล้ว', ' ', 'น.พ.จรัล', 'ประชุม', 'ร่วม', 'กับ',
         'เจ้าหน้าที่', 'ทุก', 'ฝ่าย', ' ', 'เพื่อ', 'สรุป', 'ผล', 'การ', 'ดำเนิน', 'การ', ' ', 'รวม', 'ทั้ง', 'สอบสวน',
         'โรค', 'ก่อน', 'ที่', 'ผู้', 'ป่วย', 'จะ', 'ถูก', 'ส่ง', 'มา', 'รักษา', 'ตัว', ' ', 'จาก', 'นั้น', 'ร่วม',
         'กัน', 'แถลง', 'ข่าว', ' ', 'โดย', ' ', 'น.พ.จรัล', 'กล่าว', 'ว่า', ' ', 'ขณะ', 'นี้', 'ผู้', 'ป่วย', 'ทั้ง',
         ' ', '3', ' ', 'ราย', ' ', 'อาการ', 'ยัง', 'ทรง', ' ', 'โดย', 'ใน', 'ราย', 'ของ', ' ', 'ด.ช.กิตติพงษ์', ' ',
         'กับ', ' ', 'ด.ญ.กาญจนา', ' ', 'ปอด', 'หาย', 'เป็น', 'ปกติ', 'แล้ว', ' ', 'คาด', 'ว่า', 'จะ', 'กลับ', 'บ้าน',
         'ได้', 'ใน', 'ไม่', 'ช้า', 'นี้', ' ', 'แต่', 'ใน', 'ราย', 'ของ', 'นางประนอม', 'อาการ', 'ยัง', 'น่า',
         'เป็นห่วง', ' ', 'ซึ่ง', 'ทั้ง', ' ', '3', ' ', 'ราย', ' ', 'ใน', 'ชั้น', 'นี้', 'ถือ', 'ว่า', 'เป็น', 'ผู้',
         'ป่วย', 'อยู่', 'ใน', 'ขั้น', 'น่า', 'สงสัย', 'อาจ', 'ติด', 'เชื้อ', 'ไข้', 'หวัด', 'นก', ' ', 'เพราะ', 'ตรวจ',
         'พบ', 'ผู้', 'ป่วย', 'มี', 'อาการ', 'ปอด', 'บวม', 'ปอด', 'อักเสบ', ' ', 'เนื่อง', 'จาก', 'ติด', 'เชื้อ',
         'ไวรัส', ' ', 'แต่', 'ยัง', 'สรุป', 'ไม่', 'ได้', 'ว่า', 'ติด', 'เชื้อ', 'ไข้', 'หวัด', 'นก', 'แน่ชัด', 'หรือ',
         'ไม่', ' ', 'ต้อง', 'รอ', 'ผล', 'ตรวจ', 'จาก', 'ห้อง', 'ปฏิบัติการ', 'ที่', 'ได้', 'ส่ง', 'ตัวอย่าง', 'เลือด',
         ' ', 'ไป', 'ตรวจ', 'พิสูจน์', 'ที่', 'กรมวิทยาศาสตร์การแพทย์กระทรวงสาธารณสุข', ' ', 'และ', ' ', 'รพ.ศิริราช',
         ' ', 'ซึ่ง', 'จะ', 'ทราบ', 'ผล', 'ใน', 'วัน', 'สอง', 'วัน', 'นี้']
            ]

        self.assertEqual('foo'.upper(), 'FOO')
        chunks = load_data_classifier(path, 1)
        for i in range(4):
            self.assertEqual(next(chunks), expect_list[i])


    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

if __name__ == '__main__':
    unittest.main()